"""
Retrieving linters.

Acknowledgements
----------------
Some parts of this module were generated by and adapted from Perplexity.
"""

import shutil


class Linters:
    """
    Checks if requested linter is available.

    Attributes
    ----------
    supported : dict

    """
    def __init__(self):
        """
        Initialise Linters instance.
        """
        # Supported linters configuration
        self.supported = {
            "pylint": {
                "command": "pylint",
                "description": "Python code analysis tool",
            },
            "flake8": {
                "command": "flake8",
                "description": "Style guide enforcement tool",
            },
            "mypy": {
                "command": "mypy",
                "description": "Static type checker",
            }
        }

    def check_supported(self, linter_name):
        """
        Check if linter is supported by lintquarto.

        Parameters
        ----------
        linter_name : str
            Name of the linter to check.
        """
        if linter_name not in self.supported.keys():
            raise ValueError(
                f"Unsupported linter '{linter_name}'. Supported: " +
                f"{', '.join(self.supported.keys())}"
            )

    def check_available(self, linter_name):
        """
        Check if a linter is available in the system.

        Parameters
        ----------
        linter_name : str
            Name of the linter to check.

        Notes
        -----
        Adapted from code generated by Perplexity.
        """
        command = self.supported[linter_name]["command"]
        if shutil.which(command) is None:
            raise FileNotFoundError(
                f"{linter_name} not found. Please install it."
            )
