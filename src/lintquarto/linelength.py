"""
Detect configured line length.

Acknowledgements
----------------
Some parts of this module were generated by and adapted from Perplexity.
"""

import os
import configparser
import toml


class LineLengthDetector:
    """
    Detect the configured line length for a given Python linter.

    This class searches for relevant configuration files in the directory tree,
    extracts the maximum line length setting for the specified linter, and
    returns the default value if no configuration is found.

    Attributes
    ----------
    linter : str
        The name of the linter to check ("flake8", "pycodestyle", "ruff")
    defaults : dict
        The default maximum line length for each linter.
    start_dir : str
        The directory from which to start searching for configuration files.

    Notes
    -----
    Adapted from code generated by Perplexity.
    """
    def __init__(self, linter, start_dir="."):
        """
        Initialise a LineLengthDetector instance.

        Parameters
        ----------
        linter : str
            The name of the linter to check ("flake8", "pycodestyle", "ruff")
        start_dir : str, optional
            The directory from which to start searching for configuration
            files. Defaults to the current directory.

        Raises
        ------
        ValueError
            If the specified linter is not supported.
        """
        self.linter = linter
        self.defaults = {
            "flake8": 79,
            "pycodestyle": 79,
            "ruff": 88
        }
        if self.linter not in self.defaults:
            raise ValueError(
                f"LineLengthDetector not available for {self.linter}. ",
                f"Can only check: {self.defaults.keys()}.")
        self.start_dir = os.path.abspath(start_dir)

    def get_line_length(self):
        """
        Get the configured maximum line length for the specified linter.

        Returns
        -------
        int
            The maximum line length.
        """
        if self.linter in ["flake8", "pycodestyle"]:
            return self._get_flake8_line_length()
        elif self.linter == "ruff":
            return self._get_ruff_line_length()
        else:
            return self.defaults[self.linter]

    def _get_flake8_line_length(self):
        """
        Search for the maximum line length in Flake8-compatible configuration
        files.

        This method checks `.flake8`, `setup.cfg`, and `tox.ini` files for the
        `max-line-length` option under `[flake8]` or `[pycodestyle]` sections.

        Returns
        -------
        int
            The maximum line length.
        """
        config_files = [".flake8", "setup.cfg", "tox.ini"]
        current = self.start_dir
        while True:
            for config_file in config_files:
                path = os.path.join(current, config_file)
                if os.path.isfile(path):
                    config = configparser.ConfigParser()
                    config.read(path)
                    # Check both [flake8] and [pycodestyle] sections
                    for section in ["flake8", "pycodestyle"]:
                        if config.has_section(section) and config.has_option(
                            section, "max-line-length"
                        ):
                            try:
                                return int(config.get(
                                    section, "max-line-length"))
                            except Exception:
                                pass
            parent = os.path.dirname(current)
            if parent == current:
                break
            current = parent
        return self.defaults[self.linter]

    def _get_ruff_line_length(self):
        """
        Search for the maximum line length in `pyproject.toml` for Ruff.

        This method checks the `[tool.ruff]` section for the `line-length`
        option.

        Returns
        -------
        int
            The maximum line length.
        """
        current = self.start_dir
        while True:
            path = os.path.join(current, "pyproject.toml")
            if os.path.isfile(path):
                try:
                    config = toml.load(path)
                    ruff_config = config.get("tool", {}).get("ruff", {})
                    if "line-length" in ruff_config:
                        return int(ruff_config["line-length"])
                except Exception:
                    pass
            parent = os.path.dirname(current)
            if parent == current:
                break
            current = parent
        return self.defaults[self.linter]
