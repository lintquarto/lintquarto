# Summary

The `lintquarto` package enables you to run a range of linters, static type checkers and code analysis tools on python code in Quarto `.qmd` files.

This page provides an overview of the available tools.

Use the sidebar to explore ready-to-run examples and detailed usage for each tool.

<br>

## General linters

| Tool | Description |
| - | - |
| [**flake8**](flake8.qmd) | Lightweight tool focused on PEP-8 style, basic errors, and code complexity. |
| [**pycodestyle**](pycodestyle.qmd) | Checks against PEP-8 style guidelines. |
| [**pydoclint**](pydoclint.qmd) | Docstring linter. |
| [**pyflakes**](pyflakes.qmd) | Checks for logical errors like undefined names and unused imports. |
| [**pylint**](pylint.qmd) | Detailed linter that detects errors, bugs, variable naming issues, and other code problems. |
| [**ruff**](ruff.qmd) | Modern, ultra-fast linter that implements checks from Flake8 and some other popular plugins. |
| [**vulture**](vulture.qmd) | Finds unused/dead code. |
: {tbl-colwidths="[15,85]"}

## Static type checkers

| Tool | Description |
| - | - |
| [**mypy**](mypy.qmd) | Python's popular static type checker. |
| [**pyrefly**](pyrefly.qmd) | Meta's Rust-based static type checker (successor to Pyre). |
| [**pyright**](pyright.qmd) | Microsoft's static type checker. |
| [**pytype**](pytype.qmd) | Google's static type checker. |
: {tbl-colwidths="[15,85]"}

## Code analysis tools

| Tool | Description |
| --- | - |
| [**radon**](radon.qmd) | Calculates complexity, maintainability, raw statistics, and Halstead metrics. |
: {tbl-colwidths="[15,85]"}

<br>

## Known limitation: config files

Config files are supported, but they have a limitation similar to [nbqa](https://nbqa.readthedocs.io/en/latest/known-limitations.html): filenames must use the `.py` extension.

When lintquarto runs, it creates a temporary `.py` copy of each file - for example, `mypage.qmd` becomes `mypage.py`. If a file with the same name already exists, it creates a variant like `mypage(1).py`. In the config file, entries should use a pattern that matches possible duplicates using `*.py`.

For example, to run `flake8` on `mypage.qmd` but disable the `C0103` (invalid-name) warning, the `.flake8` file must be written as:

```{.bash}
[flake8]
per-file-ignores =
    mypage*.py: C0103
```